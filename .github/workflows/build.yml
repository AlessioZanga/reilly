on: [push]

name: build

jobs:
  build:
    runs-on: '${{ matrix.os }}'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        env: ["stable", "beta", "nightly"]
    steps:
      - uses: actions/checkout@v3
      - name: Cache
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ hashFiles('Cargo.toml') }}-${{ hashFiles('.github/workflows/build.yml') }}
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.env }}
      - name: Build
        run: cargo build -v
  test:
    runs-on: '${{ matrix.os }}'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        env: ["stable", "beta", "nightly"]
    steps:
      - uses: actions/checkout@v3
      - name: Cache
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ hashFiles('Cargo.toml') }}-${{ hashFiles('.github/workflows/build.yml') }}
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.env }}
      - name: Test
        run: cargo test --tests -v
      - name: Doctest
        if: ${{ runner.os == 'Linux' && matrix.env == 'stable' }}
        run: cargo test --doc -v
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ hashFiles('Cargo.toml') }}-${{ hashFiles('.github/workflows/build.yml') }}
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - name: Check
        run: cargo check --all -v
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ hashFiles('Cargo.toml') }}-${{ hashFiles('.github/workflows/build.yml') }}
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
      - name: Clippy
        run: cargo clippy --all-targets --all-features --no-deps -- -D warnings -v
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ hashFiles('Cargo.toml') }}-${{ hashFiles('.github/workflows/build.yml') }}
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: llvm-tools-preview
      - name: Coverage
        run: |
          cargo install cargo-llvm-cov
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info -v
      - name: CodeCov
        uses: codecov/codecov-action@v2
        with:
          files: ./lcov.info
          flags: unittests
          fail_ci_if_error: true
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ hashFiles('Cargo.toml') }}-${{ hashFiles('.github/workflows/build.yml') }}
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          # Rustfmt needs nightly
          toolchain: nightly
          components: rustfmt
      - name: Format
        run: cargo +nightly fmt --all --check -v
  publish:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [build, test, check, clippy, format]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ hashFiles('Cargo.toml') }}-${{ hashFiles('.github/workflows/build.yml') }}
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - name: Publish
        env:
          TOKEN: ${{ secrets.TOKEN }}
        run: |
          cargo login "$TOKEN"
          cargo publish --allow-dirty      
